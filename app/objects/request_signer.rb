# frozen_string_literal: true

require "base64"

# Contains several functions to make it easier signing requests for ActivityPubClient
module RequestSigner
  HEADERS = "(request-target) host date digest"

  class << self
    # Generates the body digest for the signature
    # @param body [String] The body of the request
    # @return [String] The digest of the body with the digest used
    def body_digest(body)
      base64_body = Base64.strict_encode64(OpenSSL::Digest::SHA256.digest(body))
      "SHA-256=#{base64_body}"
    end

    # Generates the signed string to be used for signing.
    # @param request_target [String] A string that pins the method and path of the destination, for instance +post /inbox+
    # @param host [String] The host of the request
    # @param date [String] A utc date, in +httpdate+ format, i.e +Sun, 06 Nov 1994 08:49:37 GMT+
    # @param body_digest [String] A string with the digest of the body, can be generated by using +.body_digest+
    # @return [String]
    def signed_string(request_target, host, date, body_digest)
      [
        "(request-target): #{request_target}",
        "host: #{host}",
        "date: #{date}",
        "digest: #{body_digest}"
      ].join("\n")
    end

    # Signs the request using the +keypair+ and encodes it for the header
    # @param signed_string [String] The string generated by +.signed_string+
    # @param keypair [OpenSSL::PKey::RSA] A private key to sign the string
    def sign(signed_string, keypair)
      Base64.strict_encode64(
        keypair.sign(
          OpenSSL::Digest.new("SHA256"), signed_string
        )
      )
    end
  end
end
